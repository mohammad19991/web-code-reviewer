name: Create Release and Update Latest Tag

on:
  push:
    branches:
      - master
    paths:
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ACTION_TOKEN_SECRET }}

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build the project
        run: npm run build

      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Build failed: dist directory not found"
            exit 1
          fi
          echo "✅ Build successful: dist directory created"
          ls -la dist/

      - name: Get package.json version
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "📦 Current package.json version: $VERSION"
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "🆕 New version to be released: $NEW_VERSION"
          echo "📝 Incremented patch version from $VERSION to $NEW_VERSION"

      - name: Check if tag already exists
        id: check-tag
        run: |
          if git tag -l "${{ steps.get-version.outputs.version }}" | grep -q "${{ steps.get-version.outputs.version }}"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "❌ Tag ${{ steps.get-version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Tag ${{ steps.get-version.outputs.version }} does not exist"
          fi

      - name: Clean working directory
        if: steps.check-tag.outputs.exists == 'false'
        run: |
          echo "🧹 Cleaning working directory before version update..."
          git status
          git clean -fd
          git reset --hard HEAD
          echo "✅ Working directory cleaned"

      - name: Generate release notes
        if: steps.check-tag.outputs.exists == 'false'
        id: generate-notes
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --no-merges)
          else
            COMMITS=$(git log --oneline --no-merges $LAST_TAG..HEAD)
          fi
          
          # Generate release notes
          NOTES="## 🚀 Release ${{ steps.get-version.outputs.version }}\n\n"
          NOTES+="### 📝 Changes\n\n"
          NOTES+="$COMMITS" | head -20 | while read line; do
            NOTES+="- $line\n"
          done
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo -e "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "📝 Generated release notes from commits"

      - name: Create and push tag
        if: steps.check-tag.outputs.exists == 'false'
        run: |
          git tag "${{ steps.get-version.outputs.version }}"
          git push origin "${{ steps.get-version.outputs.version }}"
          echo "✅ Tag ${{ steps.get-version.outputs.version }} created and pushed"

      - name: Update package.json version
        if: steps.check-tag.outputs.exists == 'false'
        run: |
          # Extract version without 'v' prefix for package.json
          NEW_VERSION=${{ steps.get-version.outputs.version }}
          NEW_VERSION=${NEW_VERSION#v}
          
          # Pull latest changes first to avoid conflicts
          git pull origin master --rebase
          
          # Update package.json version
          npm version $NEW_VERSION --no-git-tag-version
          
          # Stage and commit version changes
          git add package.json package-lock.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          
          # Push the version update
          git push origin master
          
          echo "✅ Package.json updated to version $NEW_VERSION and pushed to master"

      - name: Create GitHub Release
        if: steps.check-tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_TOKEN_SECRET }}
        with:
          tag_name: ${{ steps.get-version.outputs.version }}
          release_name: Release ${{ steps.get-version.outputs.version }}
          body: ${{ steps.generate-notes.outputs.notes }}

      - name: Success message
        if: steps.check-tag.outputs.exists == 'false'
        run: |
          echo "🎉 Release ${{ steps.get-version.outputs.version }} created successfully!"
          echo "🔨 Build completed and verified successfully"
          echo "📝 Release notes have been generated from commits"
          echo "🏷️ Tag has been created and pushed"
          echo "📦 Package.json version has been updated and pushed to master"
          echo ""
          echo "Next steps:"
          echo "1. Verify the release on GitHub"
          echo "2. The update-latest-tag workflow will run automatically"
          echo "3. Package.json is now ready for the next development cycle"

      - name: Tag already exists message
        if: steps.check-tag.outputs.exists == 'true'
        run: |
          echo "⚠️ Tag ${{ steps.get-version.outputs.version }} already exists"
          echo "No action taken. Version may need to be incremented in package.json"
